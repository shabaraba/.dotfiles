[[plugins]]
repo = 'dbakker/vim-projectroot'
hook_add = '''
    nnoremap <silent> <space>lcd :ProjectRootCD<CR>
    nnoremap <silent> <space>cdn :ProjectRootCD<CR>:NERDTreeCWD<CR>
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'leafgarland/typescript-vim'

# quick run
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
'''

# # snipets
# [[plugins]]
# repo = 'SirVer/ultisnips'
# hook_add = '''
#     let g:UltiSnipsSnippetDirectories=["~/.config/ultisnips"]
#     let g:UltiSnipsExpandTrigger="<tab>"
#     let g:UltiSnipsJumpForwardTrigger="<c-b>"
#     let g:UltiSnipsJumpBackwardTrigger="<c-z>"

#     let g:UltiSnipsEditSplit="vertical"
# '''

# php doc
[[plugins]]
# repo = 'vim-scripts/PDV--phpDocumentor-for-Vim'
repo = 'nanndemoiikara/PDV--phpDocumentor-for-Vim'
hook_add = '''
    let g:pdv_cfg_Type = "mixed"
    let g:pdv_cfg_Package = ""
    let g:pdv_cfg_Version = "$id$"
    let g:pdv_cfg_Author = "Tanaka <tanaka@example.com>"
    let g:pdv_cfg_License = "Hoge Lisence"
    inoremap /** <ESC>j:call PhpDocSingle()<CR>i
'''

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'w0rp/ale'

# vim suggestion
[[plugins]]
repo = 'Shougo/neco-vim'

# language server plotocol
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'realease'
on_i = 1
merged = '0'
hook_source = 'call coil398#init#coc#hook_source()'
hook_add = '''
    let g:coc_global_extensions = [
        \'@yaegassy/coc-volar',
        \'coc-css',
        \'coc-docker',
        \'coc-eslint',
        \'coc-git',
        \'coc-html',
        \'coc-json',
        \'coc-lua',
        \'coc-markdownlint',
        \'coc-phpls',
        \'coc-prettier',
        \'coc-sql',
        \'coc-sumneko-lua',
        \'coc-toml',
        \'coc-tsserver',
        \'coc-vimlsp',
        \'coc-jedi',
        \'coc-diagnostic',
        \'coc-pyright',
        \'coc-tabnine',
        \'coc-fzf-preview',
    \]
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " 初回起動時はCocUpdateコマンドを実行
    autocmd FileType json syntax match Comment +\/\/.\+$+
    nmap <silent> <space><space> :<C-u>CocList<cr>
    nmap <silent> <space>h :<C-u>call CocAction('doHover')<cr>
    nmap <silent> <C-]> <Plug>(coc-definition)
    nmap <silent> <C-]><C-]>  <Plug>(coc-references)
    nmap <silent> <space>rn <Plug>(coc-rename)
    nmap <silent> <A-S-f> <Plug>(coc-format)
'''

# jump
[[plugins]]
repo = 'pechorin/any-jump.vim'
hook_add = '''
    " Normal mode: Jump to definition under cursor
    nnoremap <leader>j :AnyJump<CR>

    " Visual mode: jump to selected text in visual mode
    xnoremap <leader>j :AnyJumpVisual<CR>

    " Normal mode: open previous opened file (after jump)
    nnoremap <leader>ab :AnyJumpBack<CR>

    " Normal mode: open last closed search window again
    nnoremap <leader>al :AnyJumpLastResults<CR>
'''


# comment out
[[plugins]]
repo = 'tpope/vim-commentary'
hook_add = '''
    autocmd FileType python setlocal commentstring=#\ %s
'''

# pug syntax highlighting
[[plugins]]
repo = 'digitaltoad/vim-pug'

# show current function in status bar "
#[[plugins]]
#repo = "tyru/current-func-info.vim"
#hook_add = '''
#    let &statusline .= ' [%{cfi#format("%s", "")}]'
#'''

# csv syntax highlight
[[plugins]]
repo = 'mechatroner/rainbow_csv'

# dart
# [[plugins]]
# repo = 'dart-lang/dart-vim-plugin'
# on_ft = ['dart']
# 
# [[plugins]]
# repo = 'thosakwe/vim-flutter'
# 
# [[plugins]]
# repo = 'natebosch/vim-lsc'
# 
# [[plugins]]
# repo = 'natebosch/vim-lsc-dart'

[[plugins]]
repo = 'skanehira/preview-markdown.vim'
hook_add = '''
    let g:preview_markdown_auto_update = 1
    let g:preview_markdown_vertical = 1
    let g:preview_markdown_parser = 'glow'
'''
